-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Gql.Swapi.Object.Film exposing (..)

import Gql.Swapi.InputObject
import Gql.Swapi.Interface
import Gql.Swapi.Object
import Gql.Swapi.Scalar
import Gql.Swapi.ScalarCodecs
import Gql.Swapi.Union
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode


{-| The title of this film.
-}
title : SelectionSet (Maybe String) Gql.Swapi.Object.Film
title =
    Object.selectionForField "(Maybe String)" "title" [] (Decode.string |> Decode.nullable)


{-| The episode number of this film.
-}
episodeID : SelectionSet (Maybe Int) Gql.Swapi.Object.Film
episodeID =
    Object.selectionForField "(Maybe Int)" "episodeID" [] (Decode.int |> Decode.nullable)


{-| The opening paragraphs at the beginning of this film.
-}
openingCrawl : SelectionSet (Maybe String) Gql.Swapi.Object.Film
openingCrawl =
    Object.selectionForField "(Maybe String)" "openingCrawl" [] (Decode.string |> Decode.nullable)


{-| The name of the director of this film.
-}
director : SelectionSet (Maybe String) Gql.Swapi.Object.Film
director =
    Object.selectionForField "(Maybe String)" "director" [] (Decode.string |> Decode.nullable)


{-| The name(s) of the producer(s) of this film.
-}
producers : SelectionSet (Maybe (List (Maybe String))) Gql.Swapi.Object.Film
producers =
    Object.selectionForField "(Maybe (List (Maybe String)))" "producers" [] (Decode.string |> Decode.nullable |> Decode.list |> Decode.nullable)


{-| The ISO 8601 date format of film release at original creator country.
-}
releaseDate : SelectionSet (Maybe String) Gql.Swapi.Object.Film
releaseDate =
    Object.selectionForField "(Maybe String)" "releaseDate" [] (Decode.string |> Decode.nullable)


type alias SpeciesConnectionOptionalArguments =
    { after : OptionalArgument String
    , first : OptionalArgument Int
    , before : OptionalArgument String
    , last : OptionalArgument Int
    }


speciesConnection :
    (SpeciesConnectionOptionalArguments -> SpeciesConnectionOptionalArguments)
    -> SelectionSet decodesTo Gql.Swapi.Object.FilmSpeciesConnection
    -> SelectionSet (Maybe decodesTo) Gql.Swapi.Object.Film
speciesConnection fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { after = Absent, first = Absent, before = Absent, last = Absent }

        optionalArgs =
            [ Argument.optional "after" filledInOptionals.after Encode.string, Argument.optional "first" filledInOptionals.first Encode.int, Argument.optional "before" filledInOptionals.before Encode.string, Argument.optional "last" filledInOptionals.last Encode.int ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "speciesConnection" optionalArgs object_ (identity >> Decode.nullable)


type alias StarshipConnectionOptionalArguments =
    { after : OptionalArgument String
    , first : OptionalArgument Int
    , before : OptionalArgument String
    , last : OptionalArgument Int
    }


starshipConnection :
    (StarshipConnectionOptionalArguments -> StarshipConnectionOptionalArguments)
    -> SelectionSet decodesTo Gql.Swapi.Object.FilmStarshipsConnection
    -> SelectionSet (Maybe decodesTo) Gql.Swapi.Object.Film
starshipConnection fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { after = Absent, first = Absent, before = Absent, last = Absent }

        optionalArgs =
            [ Argument.optional "after" filledInOptionals.after Encode.string, Argument.optional "first" filledInOptionals.first Encode.int, Argument.optional "before" filledInOptionals.before Encode.string, Argument.optional "last" filledInOptionals.last Encode.int ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "starshipConnection" optionalArgs object_ (identity >> Decode.nullable)


type alias VehicleConnectionOptionalArguments =
    { after : OptionalArgument String
    , first : OptionalArgument Int
    , before : OptionalArgument String
    , last : OptionalArgument Int
    }


vehicleConnection :
    (VehicleConnectionOptionalArguments -> VehicleConnectionOptionalArguments)
    -> SelectionSet decodesTo Gql.Swapi.Object.FilmVehiclesConnection
    -> SelectionSet (Maybe decodesTo) Gql.Swapi.Object.Film
vehicleConnection fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { after = Absent, first = Absent, before = Absent, last = Absent }

        optionalArgs =
            [ Argument.optional "after" filledInOptionals.after Encode.string, Argument.optional "first" filledInOptionals.first Encode.int, Argument.optional "before" filledInOptionals.before Encode.string, Argument.optional "last" filledInOptionals.last Encode.int ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "vehicleConnection" optionalArgs object_ (identity >> Decode.nullable)


type alias CharacterConnectionOptionalArguments =
    { after : OptionalArgument String
    , first : OptionalArgument Int
    , before : OptionalArgument String
    , last : OptionalArgument Int
    }


characterConnection :
    (CharacterConnectionOptionalArguments -> CharacterConnectionOptionalArguments)
    -> SelectionSet decodesTo Gql.Swapi.Object.FilmCharactersConnection
    -> SelectionSet (Maybe decodesTo) Gql.Swapi.Object.Film
characterConnection fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { after = Absent, first = Absent, before = Absent, last = Absent }

        optionalArgs =
            [ Argument.optional "after" filledInOptionals.after Encode.string, Argument.optional "first" filledInOptionals.first Encode.int, Argument.optional "before" filledInOptionals.before Encode.string, Argument.optional "last" filledInOptionals.last Encode.int ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "characterConnection" optionalArgs object_ (identity >> Decode.nullable)


type alias PlanetConnectionOptionalArguments =
    { after : OptionalArgument String
    , first : OptionalArgument Int
    , before : OptionalArgument String
    , last : OptionalArgument Int
    }


planetConnection :
    (PlanetConnectionOptionalArguments -> PlanetConnectionOptionalArguments)
    -> SelectionSet decodesTo Gql.Swapi.Object.FilmPlanetsConnection
    -> SelectionSet (Maybe decodesTo) Gql.Swapi.Object.Film
planetConnection fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { after = Absent, first = Absent, before = Absent, last = Absent }

        optionalArgs =
            [ Argument.optional "after" filledInOptionals.after Encode.string, Argument.optional "first" filledInOptionals.first Encode.int, Argument.optional "before" filledInOptionals.before Encode.string, Argument.optional "last" filledInOptionals.last Encode.int ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "planetConnection" optionalArgs object_ (identity >> Decode.nullable)


{-| The ISO 8601 date format of the time that this resource was created.
-}
created : SelectionSet (Maybe String) Gql.Swapi.Object.Film
created =
    Object.selectionForField "(Maybe String)" "created" [] (Decode.string |> Decode.nullable)


{-| The ISO 8601 date format of the time that this resource was edited.
-}
edited : SelectionSet (Maybe String) Gql.Swapi.Object.Film
edited =
    Object.selectionForField "(Maybe String)" "edited" [] (Decode.string |> Decode.nullable)


{-| The ID of an object
-}
id : SelectionSet Gql.Swapi.ScalarCodecs.Id Gql.Swapi.Object.Film
id =
    Object.selectionForField "ScalarCodecs.Id" "id" [] (Gql.Swapi.ScalarCodecs.codecs |> Gql.Swapi.Scalar.unwrapCodecs |> .codecId |> .decoder)
